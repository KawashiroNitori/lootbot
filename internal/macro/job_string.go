// Code generated by "enumer -type Job -trimprefix Job -transform upper -sql -json -output job_string.go"; DO NOT EDIT.

package macro

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _JobName = "GLDPGLMRDLNCARCCNJTHMCRPBSMARMGSMLTWWVRALCCULMINBTNFSHPLDMNKWARDRGBRDWHMBLMACNSMNSCHROGNINMCHDRKASTSAMRDMBLUGNBDNCRPRSGE"

var _JobIndex = [...]uint8{0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120}

const _JobLowerName = "gldpglmrdlncarccnjthmcrpbsmarmgsmltwwvralcculminbtnfshpldmnkwardrgbrdwhmblmacnsmnschrogninmchdrkastsamrdmblugnbdncrprsge"

func (i Job) String() string {
	i -= 1
	if i < 0 || i >= Job(len(_JobIndex)-1) {
		return fmt.Sprintf("Job(%d)", i+1)
	}
	return _JobName[_JobIndex[i]:_JobIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _JobNoOp() {
	var x [1]struct{}
	_ = x[JobGLD-(1)]
	_ = x[JobPGL-(2)]
	_ = x[JobMRD-(3)]
	_ = x[JobLNC-(4)]
	_ = x[JobARC-(5)]
	_ = x[JobCNJ-(6)]
	_ = x[JobTHM-(7)]
	_ = x[JobCRP-(8)]
	_ = x[JobBSM-(9)]
	_ = x[JobARM-(10)]
	_ = x[JobGSM-(11)]
	_ = x[JobLTW-(12)]
	_ = x[JobWVR-(13)]
	_ = x[JobALC-(14)]
	_ = x[JobCUL-(15)]
	_ = x[JobMIN-(16)]
	_ = x[JobBTN-(17)]
	_ = x[JobFSH-(18)]
	_ = x[JobPLD-(19)]
	_ = x[JobMNK-(20)]
	_ = x[JobWAR-(21)]
	_ = x[JobDRG-(22)]
	_ = x[JobBRD-(23)]
	_ = x[JobWHM-(24)]
	_ = x[JobBLM-(25)]
	_ = x[JobACN-(26)]
	_ = x[JobSMN-(27)]
	_ = x[JobSCH-(28)]
	_ = x[JobROG-(29)]
	_ = x[JobNIN-(30)]
	_ = x[JobMCH-(31)]
	_ = x[JobDRK-(32)]
	_ = x[JobAST-(33)]
	_ = x[JobSAM-(34)]
	_ = x[JobRDM-(35)]
	_ = x[JobBLU-(36)]
	_ = x[JobGNB-(37)]
	_ = x[JobDNC-(38)]
	_ = x[JobRPR-(39)]
	_ = x[JobSGE-(40)]
}

var _JobValues = []Job{JobGLD, JobPGL, JobMRD, JobLNC, JobARC, JobCNJ, JobTHM, JobCRP, JobBSM, JobARM, JobGSM, JobLTW, JobWVR, JobALC, JobCUL, JobMIN, JobBTN, JobFSH, JobPLD, JobMNK, JobWAR, JobDRG, JobBRD, JobWHM, JobBLM, JobACN, JobSMN, JobSCH, JobROG, JobNIN, JobMCH, JobDRK, JobAST, JobSAM, JobRDM, JobBLU, JobGNB, JobDNC, JobRPR, JobSGE}

var _JobNameToValueMap = map[string]Job{
	_JobName[0:3]:          JobGLD,
	_JobLowerName[0:3]:     JobGLD,
	_JobName[3:6]:          JobPGL,
	_JobLowerName[3:6]:     JobPGL,
	_JobName[6:9]:          JobMRD,
	_JobLowerName[6:9]:     JobMRD,
	_JobName[9:12]:         JobLNC,
	_JobLowerName[9:12]:    JobLNC,
	_JobName[12:15]:        JobARC,
	_JobLowerName[12:15]:   JobARC,
	_JobName[15:18]:        JobCNJ,
	_JobLowerName[15:18]:   JobCNJ,
	_JobName[18:21]:        JobTHM,
	_JobLowerName[18:21]:   JobTHM,
	_JobName[21:24]:        JobCRP,
	_JobLowerName[21:24]:   JobCRP,
	_JobName[24:27]:        JobBSM,
	_JobLowerName[24:27]:   JobBSM,
	_JobName[27:30]:        JobARM,
	_JobLowerName[27:30]:   JobARM,
	_JobName[30:33]:        JobGSM,
	_JobLowerName[30:33]:   JobGSM,
	_JobName[33:36]:        JobLTW,
	_JobLowerName[33:36]:   JobLTW,
	_JobName[36:39]:        JobWVR,
	_JobLowerName[36:39]:   JobWVR,
	_JobName[39:42]:        JobALC,
	_JobLowerName[39:42]:   JobALC,
	_JobName[42:45]:        JobCUL,
	_JobLowerName[42:45]:   JobCUL,
	_JobName[45:48]:        JobMIN,
	_JobLowerName[45:48]:   JobMIN,
	_JobName[48:51]:        JobBTN,
	_JobLowerName[48:51]:   JobBTN,
	_JobName[51:54]:        JobFSH,
	_JobLowerName[51:54]:   JobFSH,
	_JobName[54:57]:        JobPLD,
	_JobLowerName[54:57]:   JobPLD,
	_JobName[57:60]:        JobMNK,
	_JobLowerName[57:60]:   JobMNK,
	_JobName[60:63]:        JobWAR,
	_JobLowerName[60:63]:   JobWAR,
	_JobName[63:66]:        JobDRG,
	_JobLowerName[63:66]:   JobDRG,
	_JobName[66:69]:        JobBRD,
	_JobLowerName[66:69]:   JobBRD,
	_JobName[69:72]:        JobWHM,
	_JobLowerName[69:72]:   JobWHM,
	_JobName[72:75]:        JobBLM,
	_JobLowerName[72:75]:   JobBLM,
	_JobName[75:78]:        JobACN,
	_JobLowerName[75:78]:   JobACN,
	_JobName[78:81]:        JobSMN,
	_JobLowerName[78:81]:   JobSMN,
	_JobName[81:84]:        JobSCH,
	_JobLowerName[81:84]:   JobSCH,
	_JobName[84:87]:        JobROG,
	_JobLowerName[84:87]:   JobROG,
	_JobName[87:90]:        JobNIN,
	_JobLowerName[87:90]:   JobNIN,
	_JobName[90:93]:        JobMCH,
	_JobLowerName[90:93]:   JobMCH,
	_JobName[93:96]:        JobDRK,
	_JobLowerName[93:96]:   JobDRK,
	_JobName[96:99]:        JobAST,
	_JobLowerName[96:99]:   JobAST,
	_JobName[99:102]:       JobSAM,
	_JobLowerName[99:102]:  JobSAM,
	_JobName[102:105]:      JobRDM,
	_JobLowerName[102:105]: JobRDM,
	_JobName[105:108]:      JobBLU,
	_JobLowerName[105:108]: JobBLU,
	_JobName[108:111]:      JobGNB,
	_JobLowerName[108:111]: JobGNB,
	_JobName[111:114]:      JobDNC,
	_JobLowerName[111:114]: JobDNC,
	_JobName[114:117]:      JobRPR,
	_JobLowerName[114:117]: JobRPR,
	_JobName[117:120]:      JobSGE,
	_JobLowerName[117:120]: JobSGE,
}

var _JobNames = []string{
	_JobName[0:3],
	_JobName[3:6],
	_JobName[6:9],
	_JobName[9:12],
	_JobName[12:15],
	_JobName[15:18],
	_JobName[18:21],
	_JobName[21:24],
	_JobName[24:27],
	_JobName[27:30],
	_JobName[30:33],
	_JobName[33:36],
	_JobName[36:39],
	_JobName[39:42],
	_JobName[42:45],
	_JobName[45:48],
	_JobName[48:51],
	_JobName[51:54],
	_JobName[54:57],
	_JobName[57:60],
	_JobName[60:63],
	_JobName[63:66],
	_JobName[66:69],
	_JobName[69:72],
	_JobName[72:75],
	_JobName[75:78],
	_JobName[78:81],
	_JobName[81:84],
	_JobName[84:87],
	_JobName[87:90],
	_JobName[90:93],
	_JobName[93:96],
	_JobName[96:99],
	_JobName[99:102],
	_JobName[102:105],
	_JobName[105:108],
	_JobName[108:111],
	_JobName[111:114],
	_JobName[114:117],
	_JobName[117:120],
}

// JobString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JobString(s string) (Job, error) {
	if val, ok := _JobNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _JobNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Job values", s)
}

// JobValues returns all values of the enum
func JobValues() []Job {
	return _JobValues
}

// JobStrings returns a slice of all String values of the enum
func JobStrings() []string {
	strs := make([]string, len(_JobNames))
	copy(strs, _JobNames)
	return strs
}

// IsAJob returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Job) IsAJob() bool {
	for _, v := range _JobValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Job
func (i Job) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Job
func (i *Job) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Job should be a string, got %s", data)
	}

	var err error
	*i, err = JobString(s)
	return err
}

func (i Job) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Job) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Job: %[1]T(%[1]v)", value)
	}

	val, err := JobString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
