// Code generated by "enumer -type LootEventType -trimprefix LootEventType -sql -output loot_event_type_string.go"; DO NOT EDIT.

package macro

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _LootEventTypeName = "AddCastCraftDesynthDiscardGatherGreedLotsNeedObtainPurchaseSearchSellUse"

var _LootEventTypeIndex = [...]uint8{0, 3, 7, 12, 19, 26, 32, 37, 41, 45, 51, 59, 65, 69, 72}

const _LootEventTypeLowerName = "addcastcraftdesynthdiscardgathergreedlotsneedobtainpurchasesearchselluse"

func (i LootEventType) String() string {
	if i < 0 || i >= LootEventType(len(_LootEventTypeIndex)-1) {
		return fmt.Sprintf("LootEventType(%d)", i)
	}
	return _LootEventTypeName[_LootEventTypeIndex[i]:_LootEventTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LootEventTypeNoOp() {
	var x [1]struct{}
	_ = x[LootEventTypeAdd-(0)]
	_ = x[LootEventTypeCast-(1)]
	_ = x[LootEventTypeCraft-(2)]
	_ = x[LootEventTypeDesynth-(3)]
	_ = x[LootEventTypeDiscard-(4)]
	_ = x[LootEventTypeGather-(5)]
	_ = x[LootEventTypeGreed-(6)]
	_ = x[LootEventTypeLots-(7)]
	_ = x[LootEventTypeNeed-(8)]
	_ = x[LootEventTypeObtain-(9)]
	_ = x[LootEventTypePurchase-(10)]
	_ = x[LootEventTypeSearch-(11)]
	_ = x[LootEventTypeSell-(12)]
	_ = x[LootEventTypeUse-(13)]
}

var _LootEventTypeValues = []LootEventType{LootEventTypeAdd, LootEventTypeCast, LootEventTypeCraft, LootEventTypeDesynth, LootEventTypeDiscard, LootEventTypeGather, LootEventTypeGreed, LootEventTypeLots, LootEventTypeNeed, LootEventTypeObtain, LootEventTypePurchase, LootEventTypeSearch, LootEventTypeSell, LootEventTypeUse}

var _LootEventTypeNameToValueMap = map[string]LootEventType{
	_LootEventTypeName[0:3]:        LootEventTypeAdd,
	_LootEventTypeLowerName[0:3]:   LootEventTypeAdd,
	_LootEventTypeName[3:7]:        LootEventTypeCast,
	_LootEventTypeLowerName[3:7]:   LootEventTypeCast,
	_LootEventTypeName[7:12]:       LootEventTypeCraft,
	_LootEventTypeLowerName[7:12]:  LootEventTypeCraft,
	_LootEventTypeName[12:19]:      LootEventTypeDesynth,
	_LootEventTypeLowerName[12:19]: LootEventTypeDesynth,
	_LootEventTypeName[19:26]:      LootEventTypeDiscard,
	_LootEventTypeLowerName[19:26]: LootEventTypeDiscard,
	_LootEventTypeName[26:32]:      LootEventTypeGather,
	_LootEventTypeLowerName[26:32]: LootEventTypeGather,
	_LootEventTypeName[32:37]:      LootEventTypeGreed,
	_LootEventTypeLowerName[32:37]: LootEventTypeGreed,
	_LootEventTypeName[37:41]:      LootEventTypeLots,
	_LootEventTypeLowerName[37:41]: LootEventTypeLots,
	_LootEventTypeName[41:45]:      LootEventTypeNeed,
	_LootEventTypeLowerName[41:45]: LootEventTypeNeed,
	_LootEventTypeName[45:51]:      LootEventTypeObtain,
	_LootEventTypeLowerName[45:51]: LootEventTypeObtain,
	_LootEventTypeName[51:59]:      LootEventTypePurchase,
	_LootEventTypeLowerName[51:59]: LootEventTypePurchase,
	_LootEventTypeName[59:65]:      LootEventTypeSearch,
	_LootEventTypeLowerName[59:65]: LootEventTypeSearch,
	_LootEventTypeName[65:69]:      LootEventTypeSell,
	_LootEventTypeLowerName[65:69]: LootEventTypeSell,
	_LootEventTypeName[69:72]:      LootEventTypeUse,
	_LootEventTypeLowerName[69:72]: LootEventTypeUse,
}

var _LootEventTypeNames = []string{
	_LootEventTypeName[0:3],
	_LootEventTypeName[3:7],
	_LootEventTypeName[7:12],
	_LootEventTypeName[12:19],
	_LootEventTypeName[19:26],
	_LootEventTypeName[26:32],
	_LootEventTypeName[32:37],
	_LootEventTypeName[37:41],
	_LootEventTypeName[41:45],
	_LootEventTypeName[45:51],
	_LootEventTypeName[51:59],
	_LootEventTypeName[59:65],
	_LootEventTypeName[65:69],
	_LootEventTypeName[69:72],
}

// LootEventTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LootEventTypeString(s string) (LootEventType, error) {
	if val, ok := _LootEventTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LootEventTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LootEventType values", s)
}

// LootEventTypeValues returns all values of the enum
func LootEventTypeValues() []LootEventType {
	return _LootEventTypeValues
}

// LootEventTypeStrings returns a slice of all String values of the enum
func LootEventTypeStrings() []string {
	strs := make([]string, len(_LootEventTypeNames))
	copy(strs, _LootEventTypeNames)
	return strs
}

// IsALootEventType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LootEventType) IsALootEventType() bool {
	for _, v := range _LootEventTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i LootEventType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *LootEventType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of LootEventType: %[1]T(%[1]v)", value)
	}

	val, err := LootEventTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
