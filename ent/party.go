// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/KawashiroNitori/lootbot/ent/party"
)

// Party is the model entity for the Party schema.
type Party struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID string `json:"channel_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Party) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case party.FieldID, party.FieldChannelID:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Party", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Party fields.
func (pa *Party) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case party.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pa.ID = value.String
			}
		case party.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				pa.ChannelID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Party.
// Note that you need to call Party.Unwrap() before calling this method if this Party
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Party) Update() *PartyUpdateOne {
	return (&PartyClient{config: pa.config}).UpdateOne(pa)
}

// Unwrap unwraps the Party entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Party) Unwrap() *Party {
	tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Party is not a transactional entity")
	}
	pa.config.driver = tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Party) String() string {
	var builder strings.Builder
	builder.WriteString("Party(")
	builder.WriteString(fmt.Sprintf("id=%v", pa.ID))
	builder.WriteString(", channel_id=")
	builder.WriteString(pa.ChannelID)
	builder.WriteByte(')')
	return builder.String()
}

// Parties is a parsable slice of Party.
type Parties []*Party

func (pa Parties) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
