// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/KawashiroNitori/lootbot/ent/loot"
	"github.com/KawashiroNitori/lootbot/ent/predicate"
	"github.com/KawashiroNitori/lootbot/internal/macro"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLoot = "Loot"
)

// LootMutation represents an operation that mutates the Loot nodes in the graph.
type LootMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	player_name   *string
	player_server *string
	party_id      *int64
	addparty_id   *int64
	role          *macro.Role
	job           *macro.Job
	category      *macro.Category
	item_id       *int64
	additem_id    *int64
	item_name     *string
	is_obtained   *bool
	created_at    *time.Time
	updated_at    *time.Time
	obtained_at   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Loot, error)
	predicates    []predicate.Loot
}

var _ ent.Mutation = (*LootMutation)(nil)

// lootOption allows management of the mutation configuration using functional options.
type lootOption func(*LootMutation)

// newLootMutation creates new mutation for the Loot entity.
func newLootMutation(c config, op Op, opts ...lootOption) *LootMutation {
	m := &LootMutation{
		config:        c,
		op:            op,
		typ:           TypeLoot,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLootID sets the ID field of the mutation.
func withLootID(id int64) lootOption {
	return func(m *LootMutation) {
		var (
			err   error
			once  sync.Once
			value *Loot
		)
		m.oldValue = func(ctx context.Context) (*Loot, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Loot.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLoot sets the old Loot of the mutation.
func withLoot(node *Loot) lootOption {
	return func(m *LootMutation) {
		m.oldValue = func(context.Context) (*Loot, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LootMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LootMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Loot entities.
func (m *LootMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LootMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LootMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Loot.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPlayerName sets the "player_name" field.
func (m *LootMutation) SetPlayerName(s string) {
	m.player_name = &s
}

// PlayerName returns the value of the "player_name" field in the mutation.
func (m *LootMutation) PlayerName() (r string, exists bool) {
	v := m.player_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPlayerName returns the old "player_name" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldPlayerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlayerName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlayerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlayerName: %w", err)
	}
	return oldValue.PlayerName, nil
}

// ResetPlayerName resets all changes to the "player_name" field.
func (m *LootMutation) ResetPlayerName() {
	m.player_name = nil
}

// SetPlayerServer sets the "player_server" field.
func (m *LootMutation) SetPlayerServer(s string) {
	m.player_server = &s
}

// PlayerServer returns the value of the "player_server" field in the mutation.
func (m *LootMutation) PlayerServer() (r string, exists bool) {
	v := m.player_server
	if v == nil {
		return
	}
	return *v, true
}

// OldPlayerServer returns the old "player_server" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldPlayerServer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlayerServer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlayerServer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlayerServer: %w", err)
	}
	return oldValue.PlayerServer, nil
}

// ResetPlayerServer resets all changes to the "player_server" field.
func (m *LootMutation) ResetPlayerServer() {
	m.player_server = nil
}

// SetPartyID sets the "party_id" field.
func (m *LootMutation) SetPartyID(i int64) {
	m.party_id = &i
	m.addparty_id = nil
}

// PartyID returns the value of the "party_id" field in the mutation.
func (m *LootMutation) PartyID() (r int64, exists bool) {
	v := m.party_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPartyID returns the old "party_id" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldPartyID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPartyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPartyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPartyID: %w", err)
	}
	return oldValue.PartyID, nil
}

// AddPartyID adds i to the "party_id" field.
func (m *LootMutation) AddPartyID(i int64) {
	if m.addparty_id != nil {
		*m.addparty_id += i
	} else {
		m.addparty_id = &i
	}
}

// AddedPartyID returns the value that was added to the "party_id" field in this mutation.
func (m *LootMutation) AddedPartyID() (r int64, exists bool) {
	v := m.addparty_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPartyID resets all changes to the "party_id" field.
func (m *LootMutation) ResetPartyID() {
	m.party_id = nil
	m.addparty_id = nil
}

// SetRole sets the "role" field.
func (m *LootMutation) SetRole(value macro.Role) {
	m.role = &value
}

// Role returns the value of the "role" field in the mutation.
func (m *LootMutation) Role() (r macro.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldRole(ctx context.Context) (v macro.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *LootMutation) ResetRole() {
	m.role = nil
}

// SetJob sets the "job" field.
func (m *LootMutation) SetJob(value macro.Job) {
	m.job = &value
}

// Job returns the value of the "job" field in the mutation.
func (m *LootMutation) Job() (r macro.Job, exists bool) {
	v := m.job
	if v == nil {
		return
	}
	return *v, true
}

// OldJob returns the old "job" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldJob(ctx context.Context) (v macro.Job, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJob is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJob requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJob: %w", err)
	}
	return oldValue.Job, nil
}

// ResetJob resets all changes to the "job" field.
func (m *LootMutation) ResetJob() {
	m.job = nil
}

// SetCategory sets the "category" field.
func (m *LootMutation) SetCategory(value macro.Category) {
	m.category = &value
}

// Category returns the value of the "category" field in the mutation.
func (m *LootMutation) Category() (r macro.Category, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldCategory(ctx context.Context) (v macro.Category, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *LootMutation) ResetCategory() {
	m.category = nil
}

// SetItemID sets the "item_id" field.
func (m *LootMutation) SetItemID(i int64) {
	m.item_id = &i
	m.additem_id = nil
}

// ItemID returns the value of the "item_id" field in the mutation.
func (m *LootMutation) ItemID() (r int64, exists bool) {
	v := m.item_id
	if v == nil {
		return
	}
	return *v, true
}

// OldItemID returns the old "item_id" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldItemID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemID: %w", err)
	}
	return oldValue.ItemID, nil
}

// AddItemID adds i to the "item_id" field.
func (m *LootMutation) AddItemID(i int64) {
	if m.additem_id != nil {
		*m.additem_id += i
	} else {
		m.additem_id = &i
	}
}

// AddedItemID returns the value that was added to the "item_id" field in this mutation.
func (m *LootMutation) AddedItemID() (r int64, exists bool) {
	v := m.additem_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetItemID resets all changes to the "item_id" field.
func (m *LootMutation) ResetItemID() {
	m.item_id = nil
	m.additem_id = nil
}

// SetItemName sets the "item_name" field.
func (m *LootMutation) SetItemName(s string) {
	m.item_name = &s
}

// ItemName returns the value of the "item_name" field in the mutation.
func (m *LootMutation) ItemName() (r string, exists bool) {
	v := m.item_name
	if v == nil {
		return
	}
	return *v, true
}

// OldItemName returns the old "item_name" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldItemName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldItemName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldItemName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldItemName: %w", err)
	}
	return oldValue.ItemName, nil
}

// ResetItemName resets all changes to the "item_name" field.
func (m *LootMutation) ResetItemName() {
	m.item_name = nil
}

// SetIsObtained sets the "is_obtained" field.
func (m *LootMutation) SetIsObtained(b bool) {
	m.is_obtained = &b
}

// IsObtained returns the value of the "is_obtained" field in the mutation.
func (m *LootMutation) IsObtained() (r bool, exists bool) {
	v := m.is_obtained
	if v == nil {
		return
	}
	return *v, true
}

// OldIsObtained returns the old "is_obtained" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldIsObtained(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsObtained is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsObtained requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsObtained: %w", err)
	}
	return oldValue.IsObtained, nil
}

// ResetIsObtained resets all changes to the "is_obtained" field.
func (m *LootMutation) ResetIsObtained() {
	m.is_obtained = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LootMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LootMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LootMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LootMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LootMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LootMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetObtainedAt sets the "obtained_at" field.
func (m *LootMutation) SetObtainedAt(t time.Time) {
	m.obtained_at = &t
}

// ObtainedAt returns the value of the "obtained_at" field in the mutation.
func (m *LootMutation) ObtainedAt() (r time.Time, exists bool) {
	v := m.obtained_at
	if v == nil {
		return
	}
	return *v, true
}

// OldObtainedAt returns the old "obtained_at" field's value of the Loot entity.
// If the Loot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LootMutation) OldObtainedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObtainedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObtainedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObtainedAt: %w", err)
	}
	return oldValue.ObtainedAt, nil
}

// ClearObtainedAt clears the value of the "obtained_at" field.
func (m *LootMutation) ClearObtainedAt() {
	m.obtained_at = nil
	m.clearedFields[loot.FieldObtainedAt] = struct{}{}
}

// ObtainedAtCleared returns if the "obtained_at" field was cleared in this mutation.
func (m *LootMutation) ObtainedAtCleared() bool {
	_, ok := m.clearedFields[loot.FieldObtainedAt]
	return ok
}

// ResetObtainedAt resets all changes to the "obtained_at" field.
func (m *LootMutation) ResetObtainedAt() {
	m.obtained_at = nil
	delete(m.clearedFields, loot.FieldObtainedAt)
}

// Where appends a list predicates to the LootMutation builder.
func (m *LootMutation) Where(ps ...predicate.Loot) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LootMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Loot).
func (m *LootMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LootMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.player_name != nil {
		fields = append(fields, loot.FieldPlayerName)
	}
	if m.player_server != nil {
		fields = append(fields, loot.FieldPlayerServer)
	}
	if m.party_id != nil {
		fields = append(fields, loot.FieldPartyID)
	}
	if m.role != nil {
		fields = append(fields, loot.FieldRole)
	}
	if m.job != nil {
		fields = append(fields, loot.FieldJob)
	}
	if m.category != nil {
		fields = append(fields, loot.FieldCategory)
	}
	if m.item_id != nil {
		fields = append(fields, loot.FieldItemID)
	}
	if m.item_name != nil {
		fields = append(fields, loot.FieldItemName)
	}
	if m.is_obtained != nil {
		fields = append(fields, loot.FieldIsObtained)
	}
	if m.created_at != nil {
		fields = append(fields, loot.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, loot.FieldUpdatedAt)
	}
	if m.obtained_at != nil {
		fields = append(fields, loot.FieldObtainedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LootMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case loot.FieldPlayerName:
		return m.PlayerName()
	case loot.FieldPlayerServer:
		return m.PlayerServer()
	case loot.FieldPartyID:
		return m.PartyID()
	case loot.FieldRole:
		return m.Role()
	case loot.FieldJob:
		return m.Job()
	case loot.FieldCategory:
		return m.Category()
	case loot.FieldItemID:
		return m.ItemID()
	case loot.FieldItemName:
		return m.ItemName()
	case loot.FieldIsObtained:
		return m.IsObtained()
	case loot.FieldCreatedAt:
		return m.CreatedAt()
	case loot.FieldUpdatedAt:
		return m.UpdatedAt()
	case loot.FieldObtainedAt:
		return m.ObtainedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LootMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case loot.FieldPlayerName:
		return m.OldPlayerName(ctx)
	case loot.FieldPlayerServer:
		return m.OldPlayerServer(ctx)
	case loot.FieldPartyID:
		return m.OldPartyID(ctx)
	case loot.FieldRole:
		return m.OldRole(ctx)
	case loot.FieldJob:
		return m.OldJob(ctx)
	case loot.FieldCategory:
		return m.OldCategory(ctx)
	case loot.FieldItemID:
		return m.OldItemID(ctx)
	case loot.FieldItemName:
		return m.OldItemName(ctx)
	case loot.FieldIsObtained:
		return m.OldIsObtained(ctx)
	case loot.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case loot.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case loot.FieldObtainedAt:
		return m.OldObtainedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Loot field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LootMutation) SetField(name string, value ent.Value) error {
	switch name {
	case loot.FieldPlayerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlayerName(v)
		return nil
	case loot.FieldPlayerServer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlayerServer(v)
		return nil
	case loot.FieldPartyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPartyID(v)
		return nil
	case loot.FieldRole:
		v, ok := value.(macro.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case loot.FieldJob:
		v, ok := value.(macro.Job)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJob(v)
		return nil
	case loot.FieldCategory:
		v, ok := value.(macro.Category)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case loot.FieldItemID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemID(v)
		return nil
	case loot.FieldItemName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetItemName(v)
		return nil
	case loot.FieldIsObtained:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsObtained(v)
		return nil
	case loot.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case loot.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case loot.FieldObtainedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObtainedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Loot field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LootMutation) AddedFields() []string {
	var fields []string
	if m.addparty_id != nil {
		fields = append(fields, loot.FieldPartyID)
	}
	if m.additem_id != nil {
		fields = append(fields, loot.FieldItemID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LootMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case loot.FieldPartyID:
		return m.AddedPartyID()
	case loot.FieldItemID:
		return m.AddedItemID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LootMutation) AddField(name string, value ent.Value) error {
	switch name {
	case loot.FieldPartyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPartyID(v)
		return nil
	case loot.FieldItemID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddItemID(v)
		return nil
	}
	return fmt.Errorf("unknown Loot numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LootMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(loot.FieldObtainedAt) {
		fields = append(fields, loot.FieldObtainedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LootMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LootMutation) ClearField(name string) error {
	switch name {
	case loot.FieldObtainedAt:
		m.ClearObtainedAt()
		return nil
	}
	return fmt.Errorf("unknown Loot nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LootMutation) ResetField(name string) error {
	switch name {
	case loot.FieldPlayerName:
		m.ResetPlayerName()
		return nil
	case loot.FieldPlayerServer:
		m.ResetPlayerServer()
		return nil
	case loot.FieldPartyID:
		m.ResetPartyID()
		return nil
	case loot.FieldRole:
		m.ResetRole()
		return nil
	case loot.FieldJob:
		m.ResetJob()
		return nil
	case loot.FieldCategory:
		m.ResetCategory()
		return nil
	case loot.FieldItemID:
		m.ResetItemID()
		return nil
	case loot.FieldItemName:
		m.ResetItemName()
		return nil
	case loot.FieldIsObtained:
		m.ResetIsObtained()
		return nil
	case loot.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case loot.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case loot.FieldObtainedAt:
		m.ResetObtainedAt()
		return nil
	}
	return fmt.Errorf("unknown Loot field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LootMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LootMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LootMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LootMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LootMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LootMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LootMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Loot unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LootMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Loot edge %s", name)
}
